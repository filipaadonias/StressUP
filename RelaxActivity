package orgn.feup.af.projcmeb;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.SeekBar;

public class RelaxActivity extends Activity implements Runnable{

    private MediaPlayer mp;
    private Button playButton;
    private Button pauseButton;
    private SeekBar seekBar;
    private Thread soundThread;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_relax);

        Intent intent = getIntent();
        final Bundle bd = intent.getExtras();

            pauseButton = (Button) findViewById(R.id.pauseButton);
            playButton = (Button) findViewById(R.id.playButton);
            seekBar = (SeekBar) findViewById(R.id.timeSeekBar);
            mp = MediaPlayer.create(this, R.raw.audio);
            setuplisteners();
            mp.start();
            playButton.setEnabled(false);
            pauseButton.setEnabled(true);

            soundThread = new Thread(this);
            soundThread.start();

            if(bd != null) {

                final Boolean firstTime;
                Boolean badDiagnosis;
                if(bd.get("FirstTime") != null){
                    firstTime = (Boolean) bd.get("FirstTime");
                    //badDiagnosis = false;
                }
                else {
                    firstTime = false;
                    //badDiagnosis = (Boolean) bd.get("BadDiagnosis");
                }


                final Boolean finalFirstTime = firstTime;
                mp.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {

                    public void onCompletion(MediaPlayer mp) {
                        if (firstTime) {
                            AlertDialog.Builder builder = new AlertDialog.Builder(RelaxActivity.this);
                            builder.setMessage(R.string.message_relax);

                            builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    Intent activityIntent = new Intent(getApplicationContext(), BioLibActivity.class);
                                    Boolean calibration = true;
                                    activityIntent.putExtra("Calibration", calibration);
                                    startActivity(activityIntent);

                                }
                            });
                            builder.setNegativeButton("NO", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialogInterface, int i) {
                                    Intent activityIntent = new Intent(getApplicationContext(), RelaxActivity.class);
                                    Boolean firstTime = true;
                                    activityIntent.putExtra("FirstTime", firstTime);
                                    startActivity(activityIntent);
                                }
                            });
                            AlertDialog dialog = builder.create();
                            dialog.show();
                        }
                        else {
                            AlertDialog.Builder builder = new AlertDialog.Builder(RelaxActivity.this);
                            builder.setMessage(R.string.message_measure_again);


                            builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int id) {
                                    Intent measureAgainIntent = new Intent(getApplicationContext(), BioLibActivity.class);
                                    Boolean measureAgain = true;
                                    measureAgainIntent.putExtra("MeasureAgain", measureAgain);
                                    startActivity(measureAgainIntent);
                                }
                            });
                            builder.setNegativeButton("NO", new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialogInterface, int i) {
                                    finish();
                                    System.exit(0);
                                }
                            });
                            AlertDialog dialog = builder.create();
                            dialog.show();
                        }
                    }
                });
            }
    }

    private void setuplisteners() {

        playButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mp.start();
                playButton.setEnabled(false);
                pauseButton.setEnabled(true);
            }
        });

        pauseButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                mp.pause();
                playButton.setEnabled(true);
                pauseButton.setEnabled(false);
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if(fromUser){
                    mp.seekTo(progress);
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });

    }


    @Override
    public void run() {
        int currentPosition = 0;
        int soundTotal = mp.getDuration();
        seekBar.setMax(soundTotal);

        while(mp!=null &&  currentPosition<soundTotal){
            try{
                Thread.sleep(300);
                currentPosition = mp.getCurrentPosition();

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            seekBar.setProgress(currentPosition);
        }

    }

    @Override
    protected void onPause() {
        if (mp != null) {
            mp.pause();
            mp.stop();
        }
        super.onPause();
    }

    @Override
    public void onBackPressed ()
    {
        if (mp != null)
            mp.stop();
        super.onBackPressed();
    }

}
